package io.github.akk0448.mtm.audit.ddl;

import io.github.akk0448.mtm.audit.metadata.AuditJoinColumn;
import io.github.akk0448.mtm.audit.metadata.AuditManyToManyAssociationMetadata;
import lombok.extern.slf4j.Slf4j;

import java.util.ArrayList;
import java.util.List;

/**
 * H2 database implementation of DDL generation strategy.
 *
 * @author Aniket Kumar
 * @since 1.0.0
 */
@Slf4j
public class H2DdlGenerationStrategy implements DdlGenerationStrategy {

    private static final String CREATE_TABLE_TEMPLATE = """
            CREATE TABLE IF NOT EXISTS %s (
                id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                %s,
                action VARCHAR(20) NOT NULL,
                created_by VARCHAR(255),
                created_on TIMESTAMP,
                updated_by VARCHAR(255),
                updated_on TIMESTAMP
            )
            """;

    @Override
    public String generateCreateTableQuery(AuditManyToManyAssociationMetadata metadata) {
        List<String> columnDefs = new ArrayList<>();

        for (AuditJoinColumn col : metadata.joinColumns()) {
            String sqlType = mapJavaTypeToSqlType(col.columnClassType());
            columnDefs.add(String.format("%s %s NOT NULL", col.columnName().toLowerCase(), sqlType));
        }

        for (AuditJoinColumn col : metadata.inverseJoinColumns()) {
            String sqlType = mapJavaTypeToSqlType(col.columnClassType());
            columnDefs.add(String.format("%s %s NOT NULL", col.columnName().toLowerCase(), sqlType));
        }

        String columnsPart = String.join(",\n    ", columnDefs);

        return String.format(CREATE_TABLE_TEMPLATE, metadata.tableName().toLowerCase(), columnsPart);
    }

    @Override
    public String generateTableExistsQuery(String tableName) {
        return """
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.TABLES
                WHERE TABLE_SCHEMA = DATABASE()
                AND TABLE_NAME = ?
                """;
    }

    @Override
    public String fetchColumnNameQuery(String tableName) {
        return """
                SELECT COLUMN_NAME
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE TABLE_SCHEMA = DATABASE()
                AND TABLE_NAME = ?
                ORDER BY ORDINAL_POSITION
                """;
    }

    @Override
    public String generateAlterTableQuery(String tableName, AuditJoinColumn col) {
        return String.format(
                "ALTER TABLE %s ADD COLUMN %s %s NOT NULL",
                tableName.toLowerCase(),
                col.columnName().toLowerCase(),
                mapJavaTypeToSqlType(col.columnClassType())
        );
    }

    private String mapJavaTypeToSqlType(Class<?> javaType) {
        if (javaType == Integer.class || javaType == int.class) {
            return "INTEGER";
        } else if (javaType == Long.class || javaType == long.class) {
            return "BIGINT";
        } else if (javaType == String.class) {
            return "VARCHAR(255)";
        } else if (javaType == java.time.LocalDateTime.class) {
            return "TIMESTAMP";
        } else if (javaType == java.util.Date.class) {
            return "TIMESTAMP";
        } else if (javaType == java.time.LocalDate.class) {
            return "DATE";
        } else if (javaType == java.time.LocalTime.class) {
            return "TIME";
        } else if (javaType == Boolean.class || javaType == boolean.class) {
            return "BOOLEAN";
        } else if (javaType == Double.class || javaType == double.class) {
            return "DOUBLE";
        } else if (javaType == Float.class || javaType == float.class) {
            return "FLOAT";
        } else if (javaType == java.math.BigDecimal.class) {
            return "DECIMAL(19, 2)";
        } else if (javaType == java.util.UUID.class) {
            return "UUID";
        }

        log.warn("Unmapped Java type [{}], defaulting to VARCHAR(255)", javaType.getName());
        return "VARCHAR(255)";
    }
}